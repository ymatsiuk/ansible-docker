---

- name: Add Docker repository key
  apt_key:
    id: "{{ apt_key_sig }}"
    keyserver: "{{ apt_key_url }}"
    state: present

- name: Clean old Docker repository to avoid mixing channels stable/edge
  file:
    path: /etc/apt/sources.list.d/download_docker_com_linux_ubuntu.list
    state: absent

- name: Add Docker repository and update apt cache
  apt_repository:
    repo: "{{ apt_repository }}"
    filename: "docker-stable"
    mode: '644'
    update_cache: yes
    state: present

- name: Ensure daemon.json doesn't exists
  file:
    path: /etc/docker/daemon.json
    state: absent
  when: docker_upgrade_needed is not defined

- name: Install docker package
  apt:
    name: "{{ docker_pkg_name }}={{ docker_version }}"
    update_cache: yes
  when: docker_install_needed and docker_upgrade_needed is not defined

- name: Ensure old systemd setup is gone
  file:
    path: /etc/systemd/system/docker.service.d
    state: absent
  when: docker_upgrade_needed is defined and docker_upgrade_needed

- name: Upgrade docker package
  apt:
    name: "{{ docker_pkg_name }}={{ docker_upgrade_version }}"
    only_upgrade: yes
    update_cache: yes
  when: docker_upgrade_needed is defined and docker_upgrade_needed

- name: Check if updatedb.conf exists
  stat:
    path: /etc/updatedb.conf
  register: updatedb_conf_exists

- name: Ensure updatedb does not index {{ docker_mounts.docker_dir.mount }}
  lineinfile:
    dest: /etc/updatedb.conf
    state: present
    backrefs: yes
    regexp: '^PRUNEPATHS="({{ docker_mounts.docker_dir.mount }} )?(.*)"$'
    line: 'PRUNEPATHS="{{ docker_mounts.docker_dir.mount }} \2"'
  when: updatedb_conf_exists.stat.exists

- name: Ensure our docker daemon configuration
  template:
    src=templates/daemon.json
    dest=/etc/docker/daemon.json

- name: Check if docker.service file exists
  stat:
    path: /lib/systemd/system/docker.service
  register: docker_service_exists

- name: Add socket activation to service file [https://github.com/moby/moby/issues/25471]
  lineinfile:
    dest: /lib/systemd/system/docker.service
    state: present
    backrefs: yes
    regexp: '^(ExecStart=/usr/bin/dockerd -H fd://)(.*)?$'
    line: '\1 -H tcp://{{ docker_api_ip }}:2375'
  when: docker_service_exists.stat.exists
  notify: Restart docker

- meta: flush_handlers
